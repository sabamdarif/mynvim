-- -- lua/configs/luasnip.lua
--
-- local M = {}
--
-- -- Override the problematic function in LuaSnip
-- M.setup = function()
-- 	-- -- Safe wrapper for LuaSnip's string utilities
-- 	-- local luasnip_str = require("luasnip.util.str")
-- 	-- local original_trim = luasnip_str.trim
-- 	--
-- 	-- -- Override with a safer version that checks for nil
-- 	-- luasnip_str.trim = function(str)
-- 	-- 	if not str then
-- 	-- 		return ""
-- 	-- 	end
-- 	-- 	return original_trim(str)
-- 	-- end
-- 	--
-- 	-- -- Load snippets
-- 	-- require("luasnip.loaders.from_vscode").lazy_load()
-- 	require("luasnip.loaders.from_vscode").lazy_load({ exclude = vim.g.vscode_snippets_exclude or {} })
-- 	require("luasnip.loaders.from_vscode").lazy_load({ paths = vim.g.vscode_snippets_path or "" })
--
-- 	-- snipmate format
-- 	require("luasnip.loaders.from_snipmate").load()
-- 	require("luasnip.loaders.from_snipmate").lazy_load({ paths = vim.g.snipmate_snippets_path or "" })
--
-- 	-- lua format
-- 	require("luasnip.loaders.from_lua").load()
-- 	require("luasnip.loaders.from_lua").lazy_load({ paths = vim.g.lua_snippets_path or "" })
--
-- 	vim.api.nvim_create_autocmd("InsertLeave", {
-- 		callback = function()
-- 			if
-- 				require("luasnip").session.current_nodes[vim.api.nvim_get_current_buf()]
-- 				and not require("luasnip").session.jump_active
-- 			then
-- 				require("luasnip").unlink_current()
-- 			end
-- 		end,
-- 	})
-- end
--
-- return M
--
-- local M = {}
--
-- M.setup = function()
-- 	-- Patch LuaSnip's trim to handle nil input
-- 	local luasnip_str = require("luasnip.util.str")
-- 	local original_trim = luasnip_str.trim
-- 	luasnip_str.trim = function(str)
-- 		if str == nil then
-- 			return ""
-- 		end
-- 		return original_trim(str)
-- 	end
-- 	-- Lazy-load snippets
-- 	require("luasnip.loaders.from_vscode").lazy_load({ exclude = vim.g.vscode_snippets_exclude or {} })
-- 	require("luasnip.loaders.from_vscode").lazy_load({ paths = vim.g.vscode_snippets_path or "" })
-- 	require("luasnip.loaders.from_snipmate").lazy_load({ paths = vim.g.snipmate_snippets_path or "" })
-- 	require("luasnip.loaders.from_lua").lazy_load({ paths = vim.g.lua_snippets_path or "" })
--
-- 	-- Auto unlink snippets on InsertLeave
-- 	vim.api.nvim_create_autocmd("InsertLeave", {
-- 		callback = function()
-- 			local ls = require("luasnip")
-- 			if ls.session.current_nodes[vim.api.nvim_get_current_buf()] and not ls.session.jump_active then
-- 				ls.unlink_current()
-- 			end
-- 		end,
-- 	})
-- end
--
-- return M
--
--
-- lua/configs/luasnip.lua

local M = {}

M.setup = function()
	-- Patch the `trim` function to prevent nil errors
	local luasnip_str = require("luasnip.util.str")
	local original_trim = luasnip_str.trim

	luasnip_str.trim = function(str)
		if str == nil then
			return ""
		end
		return original_trim(str)
	end

	local luasnip = require("luasnip")

	-- Load snippets from friendly-snippets
	require("luasnip.loaders.from_vscode").lazy_load()

	-- Optional: unlink snippet when leaving insert mode
	vim.api.nvim_create_autocmd("InsertLeave", {
		callback = function()
			if luasnip.session.current_nodes[vim.api.nvim_get_current_buf()] and not luasnip.session.jump_active then
				luasnip.unlink_current()
			end
		end,
	})
end

return M
